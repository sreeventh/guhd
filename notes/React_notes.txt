#######################################################################################################
-------------------------------------REACT NOTES-------------------------------------------------------
#######################################################################################################

---------------------------------------what is react--
javascript library to build user interfaces
babel is a js compiler

---------------------------------------------General--
* react.render can only take one html element otherwise code crashes
  solution - wrap in a single div

------------------------------------------------what is virtual dom--

 

--------------------------------------expressions vs statements--

* React doesnt accept statements - that is performing logic in functions and displaying elements
* solution is to use expressions - i.e, use ternary operators like ? : and && to carry out logic and conditional rendering.

--------------------------------------declarative vs imperative programming--

* Imperative programming can work within React, but it's not typically the preferred approach. React primarily follows a declarative 
  programming paradigm, where you describe the desired outcome rather than the step-by-step instructions to achieve it.
  ex: document.getElementById("id").style.display="none";

* However, there are scenarios where imperative programming might be necessary or useful within a React application. For instance, 
  you might use imperative code when interacting with the DOM directly, such as when integrating with non-React libraries or performing 
  low-level DOM manipulations.

* React provides lifecycle methods and hooks like useEffect that allow you to perform imperative actions in a controlled manner, 
  typically within the context of component lifecycle events.

* but the problem with declarative programming is that, React renders elements and are not changeable, inorder to see changes
  the elements need to be re-rendered.
  Thats where states and hooks come into play.  

-----------------------------------------states--

* In React, "state" refers to an object that represents the current state of a component. 
  It is a fundamental concept in React and plays a crucial role in building dynamic and interactive user interfaces.

* Component State: Each component in React can have its own state, which is managed internally by the component itself. This state 
  can hold data that might change over time, such as user input, the result of an API call, or UI-related information.

* Class Components: In class components, state is initialized in the constructor using this.state and can be updated 
  using this.setState() method provided by React. When the state changes, React automatically re-renders the component to 
  reflect the updated state.

  ex:
       import React, { Component } from 'react';
     
     class MyComponent extends Component {
       constructor(props) {
         super(props);
         this.state = {
           count: 0
         };
       }
     
       render() {
         return (
           <div>
             <p>Count: {this.state.count}</p>
             <button onClick={() => this.setState({ count: this.state.count + 1 })}>
               Increment
             </button>
           </div>
         );
       }
     }
     
     export default MyComponent;



-----------------------------------------hooks--

* React Hooks were first released in February 2019, with the release of React 16.8. They were introduced as a way to manage state 
  and other React features )without writing a class component). Hooks are functions that allow you to "hook into" React state and 
  lifecycle features from within a functional component.

* Before Hooks, the only way to add state to a component was to convert it to a class component. This could be cumbersome, 
  especially for small components that only needed a little bit of state. Hooks make it easy to add state to functional components, 
  without having to rewrite the entire component.

* Hooks have been very well-received by the React community, and they are now the preferred way to manage state in React components. 
  In fact, class components are now deprecated, and they will be removed from React in a future version.

* Here are some of the benefits of using React Hooks:
  )They make it easy to add state to functional components.
  )They allow you to reuse state logic between components.
  )They make your code more concise and readable.
  )They are backward-compatible, so you can start using them in your existing React projects.

----------------------------------------useState hook--

* useState is one of the basic hooks in react

* const [state, setState] = useState(initialState)
  here useState returns an array with exactly two values:
    )The current state. During the first render, it will match the initialState you have passed.
    )The set function that lets you update the state to a different value and trigger a re-render.

* Usage of useState hook:
    Adding state to a component
    Updating state based on the previous state
    Updating objects and arrays in state
    Avoiding recreating the initial state
    Resetting state with a key
    Storing information from previous renders

* useState function version
* useState with objects

* Rules of Hooks
  ✅ Call Hooks from React function components.
  ✅ Call Hooks from custom Hooks 